# ‚öôÔ∏è Desafio 06 ‚Äî S3 e  Lambda

O objetivo √© **consolidar conhecimentos em tarefas automatizadas com AWS Lambda e S3**, integrando o **DynamoDB** para persist√™ncia e o **LocalStack** como ambiente de testes local.

O foco √© desenvolver um fluxo automatizado que simula a **execu√ß√£o real de uma infraestrutura AWS**, mas rodando **inteiramente em ambiente local**.

---

## üéØ Objetivo

- Simular a AWS localmente usando **LocalStack**;
- Automatizar o processamento de arquivos enviados ao **S3**;
- Registrar as informa√ß√µes processadas em uma tabela **DynamoDB**;
- Compreender como esses componentes interagem em fluxos **serverless**.

---

## üß© Caso de uso: Sistema de Cen√°rios RPG

A empresa voltada a 
 cria√ß√£o de cen√°rios RPG deseja processar automaticamente **novos arquivos de cen√°rio** (imagens, JSON, mapas etc.).  
Cada vez que um novo arquivo √© enviado ao **S3**, uma **fun√ß√£o Lambda** √© acionada para:

1. Ler os metadados do arquivo;
2. Processar o conte√∫do (por exemplo: redimensionar imagem, validar dados);
3. Registrar o resultado do processamento em uma **tabela DynamoDB**;
4. Exibir logs e confirma√ß√µes no console.

---

## üèóÔ∏è Fluxo Arquitetural

Usu√°rio ‚Üí Upload no S3 Bucket
‚Üì
Evento S3 Trigger (Lambda)
‚Üì
Fun√ß√£o Lambda processa arquivo
‚Üì
DynamoDB recebe registro do cen√°rio
‚Üì
 Log no CloudWatch / Local


---

## üß± Componentes

| Servi√ßo | Fun√ß√£o |
|----------|--------|
| **Amazon S3** | Armazena os arquivos de entrada (imagens, JSONs etc.) |
| **AWS Lambda** | Processa os arquivos automaticamente ap√≥s upload |
| **Amazon DynamoDB** | Registra metadados e status de processamento |
| **LocalStack** | Simula localmente os servi√ßos AWS para desenvolvimento e teste |

---

## üíª Exemplo pr√°tico de implementa√ß√£o

### Estrutura do c√≥digo Lambda (exemplo `lambda_function.py`)

```python
import json
import boto3

dynamodb = boto3.resource('dynamodb', endpoint_url="http://localhost:4566")
table = dynamodb.Table('cenarios_rpg')

def lambda_handler(event, context):
    print("Evento recebido:", event)
    
    for record in event['Records']:
        s3_info = record['s3']
        bucket = s3_info['bucket']['name']
        key = s3_info['object']['key']

        # Simula√ß√£o de processamento
        status = "Processado com sucesso"
        
        # Registro no DynamoDB
        table.put_item(Item={
            'arquivo': key,
            'bucket': bucket,
            'status': status
        })
    
    return {'statusCode': 200, 'body': json.dumps('Processamento conclu√≠do')}


