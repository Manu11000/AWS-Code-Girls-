# ‚òÅÔ∏è Desafio 05 ‚Äî CloudFormation vs Terraform: Benef√≠cios e Diferen√ßas

O projeto tem como objetivo **implementar uma infraestrutura automatizada com AWS CloudFormation** e compreender suas **diferen√ßas e vantagens em rela√ß√£o ao Terraform**, ampliando o entendimento sobre ferramentas de **Infraestrutura como C√≥digo (IaC)**.

---

## üéØ Objetivo

- Consolidar o uso do **CloudFormation**;
- Compreender como ele se compara ao **Terraform**, em termos de arquitetura, uso e flexibilidade;
- Destacar os **benef√≠cios, limita√ß√µes e cen√°rios de uso** de cada ferramenta.

---

## üß© Caso de uso: Sistema de Cen√°rios RPG

O desafio consiste em modelar a infraestrutura do sistema  com CloudFormation, e refletir sobre como seria o mesmo ambiente usando Terraform.

Infraestrutura do sistema:
- EC2 para hospedar o servidor principal;
- EBS para armazenamento persistente;
- S3 para guardar imagens e mapas;
- Lambda + Step Functions para automa√ß√£o;
- (Opcional) SNS para notifica√ß√µes.

---

## ‚öôÔ∏è CloudFormation vs Terraform

| Categoria | **CloudFormation (AWS)** | **Terraform (HashiCorp)** |
|------------|--------------------------|-----------------------------|
| **Provedor** | Nativo da AWS | Multi-cloud (AWS, Azure, GCP, etc.) |
| **Linguagem** | YAML / JSON | HCL (HashiCorp Configuration Language) |
| **Gerenciamento de Estado** | Autom√°tico dentro da AWS | Manual ou remoto via Terraform Cloud/S3 |
| **Modularidade** | Suporte via *nested stacks* | Suporte via *modules* (muito mais flex√≠vel) |
| **Velocidade de provisionamento** | Um pouco mais lenta | Mais r√°pida e paralelizada |
| **Rollback autom√°tico** | Sim, em caso de erro | Parcial (depende do controle de estado) |
| **Integra√ß√£o CI/CD** | Direta com AWS CodePipeline | Flex√≠vel, funciona com qualquer ferramenta |
| **Escopo de uso** | Focado em AWS | Multi-cloud e h√≠brido |

---

## üí¨ Exemplo pr√°tico

- Com **CloudFormation**, podemos definir os recursos AWS diretamente em YAML e executa via console, CLI ou API.
- Com **Terraform**, podemos usar um √∫nico c√≥digo `.tf` para criar a mesma infraestrutura na AWS ‚Äî ou at√© replic√°-la em outro provedor.

---

## üß† Benef√≠cios do uso do CloudFormation
- Simples integra√ß√£o com IAM, CloudWatch e outros servi√ßos AWS;  
- Controle de vers√£o nativo e hist√≥rico de stacks;  
- Rollback autom√°tico em caso de falha;  
- Sem necessidade de gerenciar estado manualmente.

---

## üåç Benef√≠cios do uso do Terraform
- Suporte multi-cloud (AWS, Azure, GCP, OCI etc.);  
- Reutiliza√ß√£o de m√≥dulos;  
- Melhor controle de depend√™ncias e recursos externos;  
- Comunidade ativa e grande n√∫mero de provedores customizados.

---

## üí° Quando escolher cada um?

| Cen√°rio | Recomendado |
|----------|--------------|
| Projeto 100% AWS | ‚úÖ CloudFormation |
| Ambiente h√≠brido ou multi-cloud | ‚úÖ Terraform |
| Time pequeno e integra√ß√£o com AWS CodePipeline | ‚úÖ CloudFormation |
| Time de DevOps multi-provedores | ‚úÖ Terraform |
