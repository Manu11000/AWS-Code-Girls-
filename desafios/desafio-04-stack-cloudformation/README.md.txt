# üß± Desafio 04 ‚Äî Cria√ß√£o de Stacks com AWS CloudFormation

Implementar a **primeira Stack** utilizando o **AWS CloudFormation**, explorando o conceito de **Infraestrutura como C√≥digo (IaC)** dentro do mesmo caso de uso ‚Äî a aplica√ß√£o de cria√ß√£o e processamento de cen√°rios de RPG.

---

## üéØ Objetivo

Compreender como o **AWS CloudFormation** permite **automatizar a cria√ß√£o e gerenciamento de recursos AWS**, garantindo padroniza√ß√£o, rastreabilidade e facilidade de replica√ß√£o do ambiente.

---

## üèóÔ∏è Caso de uso: Stack para o sistema RPG

Nesta stack, os recursos do projeto anterior s√£o definidos de forma automatizada, permitindo que todo o ambiente seja criado com apenas um arquivo (`.yaml` ou `.json`).

### Recursos simulados:

1. **Amazon EC2** ‚Äî inst√¢ncia principal do sistema RPG;  
2. **Amazon EBS** ‚Äî volume de armazenamento persistente conectado √† EC2;  
3. **Amazon S3** ‚Äî bucket para armazenamento de imagens e mapas;  
4. **AWS Lambda** ‚Äî fun√ß√£o para processar uploads;  
5. **AWS Step Functions** ‚Äî orquestra√ß√£o e valida√ß√£o dos workflows.

---

## üîß Estrutura geral do template:

```yaml
AWSTemplateFormatVersion: "2010-09-09"
Description: "Stack do Sistema RPG - Bootcamp Santander Code Girls"

Resources:
  RPGS3Bucket:
    Type: AWS::S3::Bucket
    Properties:
      BucketName: "rpg-cenarios-upload"

  RPGLambdaFunction:
    Type: AWS::Lambda::Function
    Properties:
      Handler: index.handler
      Runtime: python3.9
      Role: arn:aws:iam::123456789012:role/LambdaBasicExecution
      Code:
        ZipFile: |
          def handler(event, context):
              print("Processando cen√°rio RPG...")

  RPGInstance:
    Type: AWS::EC2::Instance
    Properties:
      ImageId: ami-0abcdef1234567890
      InstanceType: t2.micro
      KeyName: rpg-keypair
